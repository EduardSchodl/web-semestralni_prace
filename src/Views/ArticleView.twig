{% extends "BaseView.twig" %}

{% block title %} {{ title }} {% endblock %}

{% block content %}
    <!-- CKEditor textarea initially hidden -->
    <div id="editorWrapper" class="container mt-5">
        <textarea name="editor" id="editor"></textarea>
    </div>

    <div class="container mt-5">
        <!-- Article Header -->
        <div id="headerDiv" class="article-header text-center mb-4">
            <h1 id="title" class="display-4">{{ article.title }}</h1>
            <p class="lead">Published on: {{ article.create_time|date('F j, Y') }}</p>
        </div>

        <!-- Article Content -->
        <div id="content" class="row article-content">
            <div class="col-md-8 offset-md-2">
                <p class="text-justify">{{ article.abstract|nl2br }}</p>
            </div>
        </div>

        <!-- Button Row -->
        <div class="row text-center mb-4">
            <div class="col-md-8 offset-md-2">
                <a href="articles/pdf/{{ article.slug }}" target="_blank" class="btn btn-primary mx-1">
                    Open PDF
                </a>
                {% if app.user.id_user == article.id_user and article.status_id == status.status_id.REVIEW_PROCESS %}
                    <button id="editSave" onclick="editArticle()" class="btn btn-success mx-1" type="button">Edit</button>
                    <button id="delete" onclick="deleteArticle()" class="btn btn-danger mx-1" type="button">Delete</button>
                {% endif %}
            </div>
        </div>

        <!-- Author Information -->
        <div class="row mb-4">
            <div class="col-md-4 offset-md-4">
                <div class="author-info text-center">
                    <h5>{{ article.first_name }} {{ article.last_name }}</h5>
                    <p>Professor, Department of Computer Science, University XYZ</p>
                    <p>Email: {{ article.email }}</p>
                </div>
            </div>
        </div>

    <!-- Review Section -->
    <div class="review-section">
        <h3 class="text-center">Reviews</h3>
        <div class="row">
            <div class="col-md-6 offset-md-3">
                {% for review in reviews %}
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">{{ review.first_name }} {{ review.last_name }}</h5>
                            <p class="card-text text-justify">{{ review.text }}</p>

                            <p>
                                <strong>Content: </strong> {{ render_stars(review.content)|raw }} <br>
                                <strong>Formality: </strong> {{ render_stars(review.formality)|raw }} <br>
                                <strong>Up-to-date: </strong> {{ render_stars(review.up_to_date)|raw }} <br>
                                <strong>Language: </strong> {{ render_stars(review.language)|raw }}
                            </p>

                            <p class="card-text"><small class="text-muted">Reviewed on: {{ review.create_date|date('F j, Y') }}</small></p>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>



    <script>
        document.getElementById("editor").style.display = "none";

        let editorInstance = null;

        // Get the article content and title
        let contentElement = document.getElementById("content");
        let titleElement = document.getElementById("headerDiv");
        let title = document.getElementById("title").textContent;

        function editArticle(){
            if(editorInstance != null){
                return;
            }

            // Switch button text to 'Save'
            let editSaveButton = document.getElementById("editSave");
            editSaveButton.innerText = "Save";
            editSaveButton.addEventListener("click", saveChanges);

            // Hide the current article content and title
            contentElement.style.display = "none";
            titleElement.style.display = "none";

            // Show the CKEditor wrapper
            document.getElementById("editorWrapper").style.display = "block";

            ClassicEditor
                .create(document.querySelector('#editor'), {
                    heading: {
                        options: [
                            { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                            { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                            { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                            { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' }
                        ]
                    }
                })
                .then(editor => {
                    editorInstance = editor;

                    // Get all paragraphs in the content
                    let paragraphs = contentElement.getElementsByTagName("p");
                    let content = '';

                    // Concatenate all paragraphs into a single string
                    for (let i = 0; i < paragraphs.length; i++) {
                        content += '<p>' + paragraphs[i].innerHTML + '</p>';
                    }

                    // Set title + content in editor
                    editorInstance.setData('<h1>' + title + '</h1>' + content);
                    console.log('Editor initialized successfully:', editor);
                })
                .catch(error => {
                    console.error('Error initializing CKEditor:', error);
                });
        }

        function saveChanges(){
            if(!editorInstance){
                return;
            }

            let data = editorInstance.getData();
            data = data.replace(/<br\s*\/?>/gi, '\n');

            let tempDiv = document.createElement("div");
            tempDiv.innerHTML = data;

            // Extract title
            let title = tempDiv.querySelector("h1") ? tempDiv.querySelector("h1").innerHTML : "";

            // Extract all paragraphs
            let paragraphs = tempDiv.querySelectorAll("p");
            let content = Array.from(paragraphs).map(p => p.innerHTML).join("\n\n");

            // Log title and content for testing
            alert(title)
            alert(content)

            $.ajax({
                url: 'articles/update',
                method: 'POST',
                data: {
                    title: title,
                    content: content,
                    article_id: {{ article.id_article }}
                },
                success: function(response) {
                    console.log("Article updated successfully.");
                    alert("Article updated!");
                    location.reload();
                },
                error: function(error) {
                    console.error("Error updating article:", error);
                    alert("There was an error updating the article.");
                }
            });
        }

        function deleteArticle(){
            $.ajax({
                url: 'articles/delete',
                method: 'POST',
                data: {
                    article_id: {{ article.id_article }}
                },
                success: function(response) {
                    try {
                        console.log(response)
                        const jsonResponse = JSON.parse(response);
                        if (jsonResponse.status === "success") {
                            console.log("Article deleted successfully.");
                            alert("Article deleted!");
                            window.location.replace("profile/articles");
                        } else {
                            alert("Error: " + jsonResponse.message);
                        }
                    } catch (error) {
                        console.error("Error parsing JSON: ", error);
                        alert("Unexpected response from the server.");
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error("Error performing action: ", errorThrown);
                    alert("There was an error performing the action: " + errorThrown);
                }
            });
        }
    </script>
{% endblock %}